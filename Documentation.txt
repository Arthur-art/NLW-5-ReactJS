#Iniciando Projeto
- yarn create next-app (nome-app)

#Adicionando Typescript
- yarn add typescript @types/react @types/node -D

#Adicionando sass
- yarn add sass

#Adicionando lib date-fns para lidar com datas dentro do JS
- yarn add date-fns

#Criando pasta Header para receber todos os components do Header da aplicação

#Adicionando Header ao arquivo _app.tsx pois header irá aparecer em todas as pages da aplicação

#Configurando css do arquivo _app para deixar o header flexivel para receber o component Player ao lado]

#Instalando JsonServer para simular uma api
- yarn add json-server -D
- criando server.json na raiz do projeto
- atualize o package.json (
     
    "scripts": {
    "dev": "next dev",
    "build": "next build",
    "start": "next start",
    "server": "json-server server.json -w -d 750 -p 3333"
  },
)
- yarn server
- localhost:3333/episodes

##Maneiras de se consumir uma Api:

#Modelo SPA(single page applications) usando useEffect:

 useEffect(() => {
    fetch('http://localhost:3333/episodes').then((response) => {
      return response.json()
    })
      .then((data) => {
        console.log(data)
      })
  }, [])


#Modelo SSR(server side redering), requisição feita na camada do next

- Dentro de qualquer arquivo na pasta pages export uma function chamada (getServerSideProps)
     
    export async function getServerSideProps(){
        const response = await fetch('http://localhost:3333/episodes')
        const data = await response.json()

        return{
            props:{
                episode: data
            }
        }
}


#Modelo SSG(static site generators), requisição feita na camada do next

- Dentro de qualquer arquivo na pasta pages export uma function chamada (getStaticProps)
     
    export async function getStaticProps(){
        const response = await fetch('http://localhost:3333/episodes')
        const data = await response.json()

        return{
            props:{
                episode: data
            },

            //De quanto em quanto tempo eu preciso atualizar essa pagina
            revalidate: 60 * 60 *8,

        }
}

#Executando em produção
- yarn build
- yarn start